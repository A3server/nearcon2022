{"version":3,"sources":["App.js","index.js"],"names":["intToColor","c","toString","padStart","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","state","connected","signedIn","accountId","balance","numPixels","boardLoaded","selectedCell","currentColor","pickerColor","colors","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","Math","trunc","offsetX","y","offsetY","cell","JSON","stringify","renderCanvas","a","saveColor","drawPixel","oldPixel","pending","_contract","draw","Promise","all","refreshBoard","refreshAccountStats","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","Date","getTime","rewardPerMs","_pixelCost","setInterval","t","nearConfig","networkId","nodeUrl","contractName","walletUrl","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_nearConfig","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","get_line_versions","lineVersions","needLines","requestLines","slice","map","lines","get_lines","results","flat","lineIndex","ctx","j","p","fillStyle","fillRect","beginPath","strokeStyle","rect","stroke","closePath","requestSignIn","signOut","hsl","h","changeColor","newColor","indexOf","concat","rgb","r","g","b","content","className","onClick","logOut","toFixed","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","role","aria-hidden","ref","height","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a75b989.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\n// import BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\n// const OneNear = new BN(\"1000000000000000000000000\");\nconst ContractName = 'place.meta';\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 8) {\n    let color = buf.readUInt32LE(i);\n    let ownerIndex = buf.readUInt32LE(i + 4);\n    pixels.push({\n      color,\n      ownerIndex,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      balance: 0.0,\n      numPixels: 0,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor: 0xff0000,\n      pickerColor: '#ff0000',\n      colors: [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"],\n      gammaColors: generateGamma(0),\n    };\n\n    this._balanceRefreshTimer = null;\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / CellWidth);\n      const y = Math.trunc(e.offsetY / CellHeight);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, () => {\n          this.renderCanvas()\n        })\n      }\n    });\n\n    canvas.addEventListener('click', async (e) => {\n      if (this.state.selectedCell !== null) {\n        this.saveColor();\n        await this.drawPixel(this.state.selectedCell);\n      }\n    });\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n\n    const oldPixel = this._lines[cell.y][cell.x];\n\n    if (oldPixel.color !== this.state.currentColor) {\n      oldPixel.pending = true\n      await this._contract.draw({\n        pixels: [{\n          x: cell.x,\n          y: cell.y,\n          color: this.state.currentColor,\n        }]\n      });\n      await Promise.all([this.refreshBoard(), this.refreshAccountStats()]);\n    }\n  }\n\n  async refreshAccountStats() {\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n    const startTime = new Date().getTime();\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\n\n    this.setState({\n      balance: balance / this._pixelCost,\n      numPixels,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime();\n      this.setState({\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost\n      })\n    }, 100);\n  }\n\n  async _initNear() {\n    const nearConfig = {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: ContractName,\n      walletUrl: 'https://wallet.testnet.near.org',\n    };\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, ContractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._contract = new nearAPI.Contract(this._account, ContractName, {\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['draw', 'buy_tokens'],\n    });\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    }\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    await this.refreshBoard();\n  }\n\n  async refreshBoard() {\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        ctx.fillStyle = intToColor(p.color);\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n      }\n    }\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n      ctx.beginPath();\n      ctx.strokeStyle = intToColor(this.state.currentColor);\n      ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'NEAR Place';\n    await this._walletConnection.requestSignIn(\n        ContractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    if (this.state.colors.indexOf(newColor) === -1) {\n      this.setState({\n        colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n      });\n    }\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out</button>\n          </div>\n          <h4>Hello, <span className=\"font-weight-bold\">{this.state.accountId}</span>!</h4>\n          <div>\n            PIXEL tokens: {this.state.balance.toFixed(6)}\n          </div>\n          <div>\n            Your pixels: {this.state.numPixels}\n          </div>\n          <div className=\"color-picker\">\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>NEAR Place</h1>\n        {content}\n        <div>\n          <canvas ref={this.canvasRef}\n                  width={800}\n                  height={800}\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}