{"version":3,"sources":["App.js","index.js"],"names":["intToColor","c","toString","padStart","transparentColor","a","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","state","connected","signedIn","accountId","balance","numPixels","boardLoaded","selectedCell","currentColor","pickerColor","colors","map","toLowerCase","pickingColor","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","Math","trunc","offsetX","target","clientWidth","y","offsetY","clientHeight","cell","JSON","stringify","renderCanvas","pickColor","saveColor","drawPixel","document","altKey","slice","_contract","draw","Promise","all","refreshBoard","refreshAccountStats","console","log","concat","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","rewardPerMs","_pixelCost","setInterval","t","nearConfig","networkId","nodeUrl","contractName","walletUrl","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_nearConfig","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","ctx","j","p","fillStyle","fillRect","forEach","beginPath","strokeStyle","lineWidth","CellWidth","arc","PI","stroke","closePath","rect","requestSignIn","signOut","hsl","h","changeColor","newColor","index","indexOf","splice","rgb","r","g","b","content","className","onClick","logOut","toFixed","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","style","marginBottom","role","aria-hidden","ref","height","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.66a8cea6.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\n// import BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\n// const OneNear = new BN(\"1000000000000000000000000\");\nconst ContractName = 'place.meta';\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\nconst BatchOfPixels = 10;\n// 500 ms\nconst BatchTimeout = 500;\nconst RefreshBoardTimeout = 1000;\nconst MaxWorkTime = 10 * 60 * 1000;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 8) {\n    let color = buf.readUInt32LE(i);\n    let ownerIndex = buf.readUInt32LE(i + 4);\n    pixels.push({\n      color,\n      ownerIndex,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      balance: 0.0,\n      numPixels: 0,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor: 0xff0000,\n      pickerColor: '#ff0000',\n      colors: [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase()),\n      gammaColors: generateGamma(0),\n      pickingColor: false,\n    };\n\n    this._balanceRefreshTimer = null;\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n    this._queue = [];\n    this._pendingPixels = [];\n    this._refreshBoardTimer = null;\n    this._sendQueueTimer = null;\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / e.target.clientWidth * BoardWidth);\n      const y = Math.trunc(e.offsetY / e.target.clientHeight * BoardWidth);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, () => {\n          this.renderCanvas()\n        })\n      }\n    });\n\n    canvas.addEventListener('click', async (e) => {\n      if (this.state.selectedCell !== null) {\n        if (this.state.pickingColor) {\n          this.pickColor(this.state.selectedCell);\n        } else {\n          this.saveColor();\n          await this.drawPixel(this.state.selectedCell);\n        }\n      }\n    });\n\n    document.addEventListener('keydown', (e) => {\n      e.altKey && this.setState({\n        pickingColor: true,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n    document.addEventListener('keyup', (e) => {\n      !e.altKey && this.setState({\n        pickingColor: false,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n  }\n\n  pickColor(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    const color = this._lines[cell.y][cell.x].color;\n\n    this.setState({\n      currentColor: color,\n      pickingColor: false,\n    }, () => {\n      this.renderCanvas()\n    });\n  }\n\n  async _sendQueue() {\n    const pixels = this._queue.slice(0, BatchOfPixels);\n    this._queue = this._queue.slice(BatchOfPixels);\n    this._pendingPixels = pixels;\n\n    try {\n      await this._contract.draw({\n        pixels\n      });\n      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\n    } catch (error) {\n      console.log(\"Failed to send a transaction\", error);\n      this._queue = this._queue.concat(this._pendingPixels);\n    }\n    this._pendingPixels = [];\n  }\n\n  async _pingQueue(ready) {\n    if (this._sendQueueTimer) {\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\n      await this._sendQueue();\n    }\n    if (this._queue.length > 0) {\n      this._sendQueueTimer = setTimeout(async () => {\n        await this._pingQueue(true);\n      }, BatchTimeout);\n    }\n\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n\n    this._queue.push({\n      x: cell.x,\n      y: cell.y,\n      color: this.state.currentColor,\n    });\n\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    await this._pingQueue(false);\n  }\n\n  async refreshAccountStats() {\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n    const startTime = new Date().getTime();\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\n\n    this.setState({\n      balance: balance / this._pixelCost,\n      numPixels,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime();\n      this.setState({\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost\n      })\n    }, 100);\n  }\n\n  async _initNear() {\n    const nearConfig = {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: ContractName,\n      walletUrl: 'https://wallet.testnet.near.org',\n    };\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, ContractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._contract = new nearAPI.Contract(this._account, ContractName, {\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['draw', 'buy_tokens'],\n    });\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    }\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    await this.refreshBoard(true);\n  }\n\n  async refreshBoard(forced) {\n    if (this._refreshBoardTimer) {\n      clearTimeout(this._refreshBoardTimer);\n      this._refreshBoardTimer = null;\n    }\n    const t = new Date().getTime();\n    if (t < this._stopRefreshTime) {\n      this._refreshBoardTimer = setTimeout(async () => {\n        await this.refreshBoard(false);\n      }, RefreshBoardTimeout);\n    }\n\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions[i]) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        ctx.fillStyle = intToColor(p.color);\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n      }\n    }\n\n    this._pendingPixels.concat(this._queue).forEach((p) => {\n      ctx.fillStyle = intToColor(p.color);\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\n    })\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n      if (this.state.pickingColor) {\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\n        ctx.lineWidth = CellWidth * 4;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\n        ctx.lineWidth = CellWidth * 2;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n      } else {\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\n        ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\n        ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\n\n        ctx.beginPath();\n        ctx.lineWidth = 3;\n        ctx.fillStyle = intToColor(this.state.currentColor);\n        ctx.strokeStyle = intToColor(this.state.currentColor);\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'NEAR Place';\n    await this._walletConnection.requestSignIn(\n        ContractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    const index = this.state.colors.indexOf(newColor);\n    if (index >= 0) {\n      this.state.colors.splice(index, 1);\n    }\n    this.setState({\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n    });\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out</button>\n          </div>\n          <h4>Hello, <span className=\"font-weight-bold\">{this.state.accountId}</span>!</h4>\n          <div>\n            PIXEL tokens: {this.state.balance.toFixed(6)}\n          </div>\n          <div>\n            Your pixels: {this.state.numPixels}\n          </div>\n          <div className=\"color-picker\">\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>NEAR Place</h1>\n        {content}\n        <div>\n          <canvas ref={this.canvasRef}\n                  width={800}\n                  height={800}\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}