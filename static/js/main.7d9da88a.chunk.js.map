{"version":3,"sources":["App.js","index.js"],"names":["PixelPrice","BN","NearConfig","networkId","nodeUrl","contractName","walletUrl","intToColor","c","toString","padStart","transparentColor","a","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","colors","map","toLowerCase","currentColor","parseInt","Math","floor","random","substring","state","connected","signedIn","accountId","balance","numPixels","pendingPixels","boardLoaded","selectedCell","pickerColor","pickingColor","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","trunc","offsetX","target","clientWidth","y","offsetY","clientHeight","cell","JSON","stringify","renderCanvas","buttons","pickColor","saveColor","drawPixel","document","altKey","slice","_contract","draw","console","log","concat","Promise","all","refreshBoard","refreshAccountStats","forEach","p","_pending","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","rewardPerMs","_pixelCost","setInterval","t","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","v","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","ctx","j","fillStyle","fillRect","beginPath","strokeStyle","lineWidth","CellWidth","arc","PI","stroke","closePath","rect","requestSignIn","signOut","hsl","h","changeColor","newColor","index","indexOf","splice","rgb","r","g","b","amount","requiredBalance","muln","buy_tokens","content","className","onClick","logOut","toFixed","buyTokens","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","style","marginBottom","role","aria-hidden","ref","height","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7d9da88a.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\nimport BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\nconst PixelPrice = new BN(\"10000000000000000000000\");\nconst IsMainnet = true;\nconst TestNearConfig = {\n  networkId: 'testnet',\n  nodeUrl: 'https://rpc.testnet.near.org',\n  contractName: 'dev-1604708520705-2360364',\n  walletUrl: 'https://wallet.testnet.near.org',\n};\nconst MainNearConfig = {\n  networkId: 'mainnet',\n  nodeUrl: 'https://rpc.mainnet.near.org',\n  contractName: 'berryclub.ek.near',\n  walletUrl: 'https://wallet.near.org',\n};\nconst NearConfig = IsMainnet ? MainNearConfig : TestNearConfig;\n\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\nconst BatchOfPixels = 30;\n// 500 ms\nconst BatchTimeout = 500;\nconst RefreshBoardTimeout = 1000;\nconst MaxWorkTime = 10 * 60 * 1000;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 8) {\n    let color = buf.readUInt32LE(i);\n    let ownerIndex = buf.readUInt32LE(i + 4);\n    pixels.push({\n      color,\n      ownerIndex,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const colors = [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase());\n    const currentColor = parseInt(colors[Math.floor(Math.random() * colors.length)].substring(1), 16);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      balance: 0.0,\n      numPixels: 0,\n      pendingPixels: 0,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor,\n      pickerColor: intToColor(currentColor),\n      colors,\n      gammaColors: generateGamma(0),\n      pickingColor: false,\n    };\n\n    this._balanceRefreshTimer = null;\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n    this._queue = [];\n    this._pendingPixels = [];\n    this._refreshBoardTimer = null;\n    this._sendQueueTimer = null;\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / e.target.clientWidth * BoardWidth);\n      const y = Math.trunc(e.offsetY / e.target.clientHeight * BoardWidth);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, async () => {\n          this.renderCanvas()\n          if (this.state.selectedCell !== null && (e.buttons & 1) > 0) {\n            if (this.state.pickingColor) {\n              this.pickColor(this.state.selectedCell);\n            } else {\n              this.saveColor();\n              await this.drawPixel(this.state.selectedCell);\n            }\n          }\n        })\n      }\n    });\n\n    canvas.addEventListener('mousedown', async (e) => {\n      if (this.state.selectedCell !== null) {\n        if (this.state.pickingColor) {\n          this.pickColor(this.state.selectedCell);\n        } else {\n          this.saveColor();\n          await this.drawPixel(this.state.selectedCell);\n        }\n      }\n    });\n\n    document.addEventListener('keydown', (e) => {\n      e.altKey && this.setState({\n        pickingColor: true,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n    document.addEventListener('keyup', (e) => {\n      !e.altKey && this.setState({\n        pickingColor: false,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n  }\n\n  pickColor(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    const color = this._lines[cell.y][cell.x].color;\n\n    this.setState({\n      currentColor: color,\n      pickingColor: false,\n    }, () => {\n      this.renderCanvas()\n    });\n  }\n\n  async _sendQueue() {\n    const pixels = this._queue.slice(0, BatchOfPixels);\n    this._queue = this._queue.slice(BatchOfPixels);\n    this._pendingPixels = pixels;\n\n    try {\n      await this._contract.draw({\n        pixels\n      }, new BN(\"300000000000000\"));\n    } catch (error) {\n      console.log(\"Failed to send a transaction\", error);\n      this._queue = this._queue.concat(this._pendingPixels);\n    }\n    try {\n      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\n    } catch (e) {\n      // ignore\n    }\n    this._pendingPixels.forEach((p) => {\n      if (this._pending[p.y][p.x] === p.color)\n      {\n       this._pending[p.y][p.x] = -1;\n      }\n    });\n    this._pendingPixels = [];\n  }\n\n  async _pingQueue(ready) {\n    if (this._sendQueueTimer) {\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\n      await this._sendQueue();\n    }\n    if (this._queue.length > 0) {\n      this._sendQueueTimer = setTimeout(async () => {\n        await this._pingQueue(true);\n      }, BatchTimeout);\n    }\n\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    if (this.state.balance - this.state.pendingPixels < 1) {\n      return;\n    }\n\n    if (this._pending[cell.y][cell.x] !== this.state.currentColor && this._lines[cell.y][cell.x].color !== this.state.currentColor) {\n      this._pending[cell.y][cell.x] = this.state.currentColor;\n    } else {\n      return;\n    }\n\n    this._queue.push({\n      x: cell.x,\n      y: cell.y,\n      color: this.state.currentColor,\n    });\n\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    await this._pingQueue(false);\n  }\n\n  async refreshAccountStats() {\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n    const startTime = new Date().getTime();\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\n\n    this.setState({\n      balance: balance / this._pixelCost,\n      pendingPixels: this._queue.length,\n      numPixels,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime();\n      this.setState({\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost,\n        pendingPixels: this._pendingPixels.length + this._queue.length,\n      })\n    }, 100);\n  }\n\n  async _initNear() {\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, NearConfig));\n    this._keyStore = keyStore;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, NearConfig.contractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._contract = new nearAPI.Contract(this._account, NearConfig.contractName, {\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['draw', 'buy_tokens'],\n    });\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    }\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    this._pending = Array(BoardHeight).fill(false);\n    this._pending.forEach((v, i, a) => a[i] = Array(BoardWidth).fill(-1));\n    await this.refreshBoard(true);\n  }\n\n  async refreshBoard(forced) {\n    if (this._refreshBoardTimer) {\n      clearTimeout(this._refreshBoardTimer);\n      this._refreshBoardTimer = null;\n    }\n    const t = new Date().getTime();\n    if (t < this._stopRefreshTime) {\n      this._refreshBoardTimer = setTimeout(async () => {\n        await this.refreshBoard(false);\n      }, RefreshBoardTimeout);\n    }\n\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions[i]) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        ctx.fillStyle = intToColor(p.color);\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n      }\n    }\n\n    this._pendingPixels.concat(this._queue).forEach((p) => {\n      ctx.fillStyle = intToColor(p.color);\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\n    })\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n      if (this.state.pickingColor) {\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\n        ctx.lineWidth = CellWidth * 4;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\n        ctx.lineWidth = CellWidth * 2;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n      } else {\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\n        ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\n        ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\n\n        ctx.beginPath();\n        ctx.lineWidth = 3;\n        ctx.fillStyle = intToColor(this.state.currentColor);\n        ctx.strokeStyle = intToColor(this.state.currentColor);\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'Berry Club';\n    await this._walletConnection.requestSignIn(\n        NearConfig.contractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    const index = this.state.colors.indexOf(newColor);\n    if (index >= 0) {\n      this.state.colors.splice(index, 1);\n    }\n    this.setState({\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n    });\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  async buyTokens(amount) {\n    const requiredBalance = PixelPrice.muln(amount);\n    await this._contract.buy_tokens({}, new BN(\"30000000000000\"), requiredBalance);\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out ({this.state.accountId})</button>\n          </div>\n          <div className=\"balances\">\n            Balance: <span className=\"font-weight-bold\">{(this.state.balance - this.state.pendingPixels).toFixed(3)}</span>\n              {'🥑 (+'}\n              <span className=\"font-weight-bold\">{this.state.numPixels + 1}</span>\n              {'🥑/day)'}\n              {\n                (this.state.pendingPixels > 0) ? (\n                  <span> ({this.state.pendingPixels} pending)</span>\n                ) : \"\"\n              }\n          </div>\n          <div className=\"buttons\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(10)}>Buy <span className=\"font-weight-bold\">25🥑</span> for <span className=\"font-weight-bold\">Ⓝ0.1</span></button>{' '}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(40)}>Buy <span className=\"font-weight-bold\">100🥑</span> for <span className=\"font-weight-bold\">Ⓝ0.4</span></button>{' '}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(100)}>Buy <span className=\"font-weight-bold\">250🥑</span> for <span className=\"font-weight-bold\">Ⓝ1</span></button>{' '}\n            <button\n              className=\"btn btn-success\"\n              onClick={() => this.buyTokens(500)}>DEAL: Buy <span className=\"font-weight-bold\">1500🥑</span> for <span className=\"font-weight-bold\">Ⓝ5</span></button>\n          </div>\n          <div className=\"color-picker\">\n            <div>Select a color to draw</div>\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>🥑 Berry Club</h1>\n        {content}\n        <div>\n          {this.state.signedIn ? <div>Draw here - one 🥑 per pixel. Hold <span className=\"badge badge-secondary\">ALT</span> key to pick a color from board.</div> : \"\"}\n          <canvas ref={this.canvasRef}\n                  width={800}\n                  height={800}\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}