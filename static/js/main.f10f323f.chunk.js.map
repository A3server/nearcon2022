{"version":3,"sources":["App.js","index.js"],"names":["intToColor","c","toString","padStart","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","state","connected","signedIn","accountId","balance","numPixels","boardLoaded","selectedCell","currentColor","pickerColor","colors","map","toLowerCase","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","Math","trunc","offsetX","y","offsetY","cell","JSON","stringify","renderCanvas","a","saveColor","drawPixel","slice","_contract","draw","Promise","all","refreshBoard","refreshAccountStats","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","rewardPerMs","_pixelCost","setInterval","t","nearConfig","networkId","nodeUrl","contractName","walletUrl","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_nearConfig","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","forced","document","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","ctx","j","p","fillStyle","fillRect","concat","forEach","transparentColor","beginPath","strokeStyle","rect","stroke","closePath","requestSignIn","signOut","hsl","h","changeColor","newColor","indexOf","rgb","r","g","b","content","className","onClick","logOut","toFixed","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","style","marginBottom","role","aria-hidden","ref","height","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f10f323f.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\n// import BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\n// const OneNear = new BN(\"1000000000000000000000000\");\nconst ContractName = 'place.meta';\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\nconst BatchOfPixels = 10;\n// 500 ms\nconst BatchTimeout = 500;\nconst RefreshBoardTimeout = 1000;\nconst MaxWorkTime = 10 * 60 * 1000;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 8) {\n    let color = buf.readUInt32LE(i);\n    let ownerIndex = buf.readUInt32LE(i + 4);\n    pixels.push({\n      color,\n      ownerIndex,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      balance: 0.0,\n      numPixels: 0,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor: 0xff0000,\n      pickerColor: '#ff0000',\n      colors: [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase()),\n      gammaColors: generateGamma(0),\n    };\n\n    this._balanceRefreshTimer = null;\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n    this._queue = [];\n    this._pendingPixels = [];\n    this._refreshBoardTimer = null;\n    this._sendQueueTimer = null;\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / CellWidth);\n      const y = Math.trunc(e.offsetY / CellHeight);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, () => {\n          this.renderCanvas()\n        })\n      }\n    });\n\n    canvas.addEventListener('click', async (e) => {\n      if (this.state.selectedCell !== null) {\n        this.saveColor();\n        await this.drawPixel(this.state.selectedCell);\n      }\n    });\n  }\n\n  async _sendQueue() {\n    const pixels = this._queue.slice(0, BatchOfPixels);\n    this._queue = this._queue.slice(BatchOfPixels);\n    this._pendingPixels = pixels;\n\n    await this._contract.draw({\n      pixels\n    });\n    await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\n    this._pendingPixels = [];\n  }\n\n  async _pingQueue(ready) {\n    if (this._sendQueueTimer) {\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\n      await this._sendQueue();\n    }\n    if (this._queue.length > 0) {\n      this._sendQueueTimer = setTimeout(async () => {\n        await this._pingQueue(true);\n      }, BatchTimeout);\n    }\n\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n\n    this._queue.push({\n      x: cell.x,\n      y: cell.y,\n      color: this.state.currentColor,\n    });\n\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    await this._pingQueue(false);\n  }\n\n  async refreshAccountStats() {\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n    const startTime = new Date().getTime();\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\n\n    this.setState({\n      balance: balance / this._pixelCost,\n      numPixels,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime();\n      this.setState({\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost\n      })\n    }, 100);\n  }\n\n  async _initNear() {\n    const nearConfig = {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: ContractName,\n      walletUrl: 'https://wallet.testnet.near.org',\n    };\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, ContractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._contract = new nearAPI.Contract(this._account, ContractName, {\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['draw', 'buy_tokens'],\n    });\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    }\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    await this.refreshBoard(true);\n  }\n\n  async refreshBoard(forced) {\n    if (this._refreshBoardTimer) {\n      clearTimeout(this._refreshBoardTimer);\n      this._refreshBoardTimer = null;\n    }\n    const t = new Date().getTime();\n    if (t < this._stopRefreshTime) {\n      this._refreshBoardTimer = setTimeout(async () => {\n        await this.refreshBoard(false);\n      }, RefreshBoardTimeout);\n    }\n\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions[i]) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        ctx.fillStyle = intToColor(p.color);\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n      }\n    }\n\n    this._pendingPixels.concat(this._queue).forEach((p) => {\n      ctx.fillStyle = intToColor(p.color);\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\n    })\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n\n      ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\n      ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\n      ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\n      ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\n      ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\n\n      ctx.beginPath();\n      ctx.fillStyle = intToColor(this.state.currentColor);\n      ctx.strokeStyle = intToColor(this.state.currentColor);\n      ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'NEAR Place';\n    await this._walletConnection.requestSignIn(\n        ContractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    if (this.state.colors.indexOf(newColor) === -1) {\n      this.setState({\n        colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n      });\n    }\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out</button>\n          </div>\n          <h4>Hello, <span className=\"font-weight-bold\">{this.state.accountId}</span>!</h4>\n          <div>\n            PIXEL tokens: {this.state.balance.toFixed(6)}\n          </div>\n          <div>\n            Your pixels: {this.state.numPixels}\n          </div>\n          <div className=\"color-picker\">\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>NEAR Place</h1>\n        {content}\n        <div>\n          <canvas ref={this.canvasRef}\n                  width={800}\n                  height={800}\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}