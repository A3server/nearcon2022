{"version":3,"sources":["App.js","index.js"],"names":["PixelPrice","BN","NearConfig","networkId","nodeUrl","contractName","walletUrl","intToColor","c","toString","padStart","transparentColor","a","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","ownerIndex","App","props","colors","map","toLowerCase","currentColor","parseInt","Math","floor","random","substring","state","connected","signedIn","accountId","balance","numPixels","pendingPixels","boardLoaded","selectedCell","pickerColor","pickingColor","owners","accounts","highlightedAccountIndex","_oldCounts","_numFailedTxs","_balanceRefreshTimer","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_accounts","_initNear","then","setState","_accountId","canvas","this","current","getContext","addEventListener","e","x","trunc","offsetX","target","clientWidth","y","offsetY","clientHeight","cell","JSON","stringify","renderCanvas","buttons","pickColor","saveColor","drawPixel","document","altKey","slice","_contract","draw","console","log","concat","Promise","all","refreshBoard","refreshAccountStats","forEach","p","_pending","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","parseFloat","get_account_balance","account_id","get_account_num_pixels","clearInterval","startTime","rewardPerMs","_pixelCost","setInterval","t","keyStore","nearAPI","BrowserLocalStorageKeyStore","Object","assign","deps","near","_keyStore","_near","_walletConnection","getAccountId","_account","account","viewMethods","changeMethods","get_pixel_cost","_lineVersions","Array","fill","v","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","lines","get_lines","results","flat","lineIndex","_refreshOwners","counts","sortedKeys","keys","sort","b","accountIndex","get_account_id_by_index","account_index","accountBalance","ctx","j","fillStyle","fillRect","beginPath","strokeStyle","lineWidth","CellWidth","arc","PI","stroke","closePath","rect","requestSignIn","signOut","hsl","h","changeColor","newColor","index","indexOf","splice","rgb","r","g","amount","requiredBalance","muln","buy_tokens","content","className","onClick","logOut","Balance","buyTokens","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","style","marginBottom","role","aria-hidden","ref","height","Leaderboard","setHover","Component","toFixed","owner","Owner","key","isHighlighted","onMouseEnter","onMouseLeave","Account","shortAccountId","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b2097c37.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\nimport BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\nconst PixelPrice = new BN(\"10000000000000000000000\");\nconst IsMainnet = true;\nconst TestNearConfig = {\n  networkId: 'testnet',\n  nodeUrl: 'https://rpc.testnet.near.org',\n  contractName: 'dev-1604708520705-2360364',\n  walletUrl: 'https://wallet.testnet.near.org',\n};\nconst MainNearConfig = {\n  networkId: 'mainnet',\n  nodeUrl: 'https://rpc.mainnet.near.org',\n  contractName: 'berryclub.ek.near',\n  walletUrl: 'https://wallet.near.org',\n};\nconst NearConfig = IsMainnet ? MainNearConfig : TestNearConfig;\n\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 8 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\nconst BatchOfPixels = 30;\n// 500 ms\nconst BatchTimeout = 500;\nconst RefreshBoardTimeout = 1000;\nconst MaxWorkTime = 10 * 60 * 1000;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 8) {\n    let color = buf.readUInt32LE(i);\n    let ownerIndex = buf.readUInt32LE(i + 4);\n    pixels.push({\n      color,\n      ownerIndex,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const colors = [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase());\n    const currentColor = parseInt(colors[Math.floor(Math.random() * colors.length)].substring(1), 16);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      balance: 0.0,\n      numPixels: 0,\n      pendingPixels: 0,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor,\n      pickerColor: intToColor(currentColor),\n      colors,\n      gammaColors: generateGamma(0),\n      pickingColor: false,\n      owners: [],\n      accounts: {},\n      highlightedAccountIndex: -1,\n    };\n\n    this._oldCounts = {};\n    this._numFailedTxs = 0;\n    this._balanceRefreshTimer = null;\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n    this._queue = [];\n    this._pendingPixels = [];\n    this._refreshBoardTimer = null;\n    this._sendQueueTimer = null;\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    this._accounts = {};\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / e.target.clientWidth * BoardWidth);\n      const y = Math.trunc(e.offsetY / e.target.clientHeight * BoardWidth);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, async () => {\n          this.renderCanvas()\n          if (this.state.selectedCell !== null && (e.buttons & 1) > 0) {\n            if (this.state.pickingColor) {\n              this.pickColor(this.state.selectedCell);\n            } else {\n              this.saveColor();\n              await this.drawPixel(this.state.selectedCell);\n            }\n          }\n        })\n      }\n    });\n\n    canvas.addEventListener('mousedown', async (e) => {\n      if (this.state.selectedCell !== null) {\n        if (this.state.pickingColor) {\n          this.pickColor(this.state.selectedCell);\n        } else {\n          this.saveColor();\n          await this.drawPixel(this.state.selectedCell);\n        }\n      }\n    });\n\n    document.addEventListener('keydown', (e) => {\n      e.altKey && this.setState({\n        pickingColor: true,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n    document.addEventListener('keyup', (e) => {\n      !e.altKey && this.setState({\n        pickingColor: false,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n  }\n\n  pickColor(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    const color = this._lines[cell.y][cell.x].color;\n\n    this.setState({\n      currentColor: color,\n      pickingColor: false,\n    }, () => {\n      this.renderCanvas()\n    });\n  }\n\n  async _sendQueue() {\n    const pixels = this._queue.slice(0, BatchOfPixels);\n    this._queue = this._queue.slice(BatchOfPixels);\n    this._pendingPixels = pixels;\n\n    try {\n      await this._contract.draw({\n        pixels\n      }, new BN(\"75000000000000\"));\n      this._numFailedTxs = 0;\n    } catch (error) {\n      console.log(\"Failed to send a transaction\", error);\n      this._numFailedTxs += 1;\n      if (this._numFailedTxs < 3) {\n        this._queue = this._queue.concat(this._pendingPixels);\n        this._pendingPixels = [];\n      } else {\n        this._pendingPixels = [];\n        this._queue = [];\n      }\n    }\n    try {\n      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);\n    } catch (e) {\n      // ignore\n    }\n    this._pendingPixels.forEach((p) => {\n      if (this._pending[p.y][p.x] === p.color)\n      {\n       this._pending[p.y][p.x] = -1;\n      }\n    });\n    this._pendingPixels = [];\n  }\n\n  async _pingQueue(ready) {\n    if (this._sendQueueTimer) {\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\n      await this._sendQueue();\n    }\n    if (this._queue.length > 0) {\n      this._sendQueueTimer = setTimeout(async () => {\n        await this._pingQueue(true);\n      }, BatchTimeout);\n    }\n\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    if (this.state.balance - this.state.pendingPixels < 1) {\n      return;\n    }\n\n    if (this._pending[cell.y][cell.x] !== this.state.currentColor && this._lines[cell.y][cell.x].color !== this.state.currentColor) {\n      this._pending[cell.y][cell.x] = this.state.currentColor;\n    } else {\n      return;\n    }\n\n    this._queue.push({\n      x: cell.x,\n      y: cell.y,\n      color: this.state.currentColor,\n    });\n\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    await this._pingQueue(false);\n  }\n\n  async refreshAccountStats() {\n    let balance = parseFloat(await this._contract.get_account_balance({account_id: this._accountId}));\n    let numPixels = await this._contract.get_account_num_pixels({account_id: this._accountId})\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n    const startTime = new Date().getTime();\n    const rewardPerMs = (numPixels + 1) * this._pixelCost / (24 * 60 * 60 * 1000);\n\n    this.setState({\n      balance: balance / this._pixelCost,\n      pendingPixels: this._queue.length,\n      numPixels,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime();\n      this.setState({\n        balance: (balance + (t - startTime) * rewardPerMs) / this._pixelCost,\n        pendingPixels: this._pendingPixels.length + this._queue.length,\n      })\n    }, 100);\n  }\n\n  async _initNear() {\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, NearConfig));\n    this._keyStore = keyStore;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, NearConfig.contractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._contract = new nearAPI.Contract(this._account, NearConfig.contractName, {\n      viewMethods: ['get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['draw', 'buy_tokens'],\n    });\n    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    }\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    this._pending = Array(BoardHeight).fill(false);\n    this._pending.forEach((v, i, a) => a[i] = Array(BoardWidth).fill(-1));\n    await this.refreshBoard(true);\n  }\n\n  async refreshBoard(forced) {\n    if (this._refreshBoardTimer) {\n      clearTimeout(this._refreshBoardTimer);\n      this._refreshBoardTimer = null;\n    }\n    const t = new Date().getTime();\n    if (t < this._stopRefreshTime) {\n      this._refreshBoardTimer = setTimeout(async () => {\n        await this.refreshBoard(false);\n      }, RefreshBoardTimeout);\n    }\n\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions[i]) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this._refreshOwners();\n    this.renderCanvas();\n  }\n\n  _refreshOwners() {\n    const counts = {};\n    this._lines.flat().forEach((cell) => {\n      counts[cell.ownerIndex] = (counts[cell.ownerIndex] || 0) + 1;\n    })\n    delete counts[0];\n    const sortedKeys = Object.keys(counts).sort((a, b) => counts[b] - counts[a]);\n    this.setState({\n      owners: sortedKeys.map((accountIndex) => {\n        accountIndex = parseInt(accountIndex);\n        return {\n          accountIndex,\n          numPixels: counts[accountIndex],\n        }\n      })\n    })\n    sortedKeys.forEach(async (accountIndex) => {\n      accountIndex = parseInt(accountIndex);\n      if (!(accountIndex in this._accounts) || counts[accountIndex] !== (this._oldCounts[accountIndex] || 0)) {\n        try {\n          const accountId = await this._contract.get_account_id_by_index({account_index: accountIndex});\n          const accountBalance = await this._contract.get_account_balance({account_id: accountId});\n          const balance = parseFloat(accountBalance) / this._pixelCost;\n          this._accounts[accountIndex] = {\n            accountIndex,\n            accountId,\n            balance,\n          };\n        } catch (err) {\n          console.log(\"Failed to fetch account index #\", accountIndex, err)\n        }\n        this.setState({\n          accounts: Object.assign({}, this._accounts),\n        })\n      }\n    })\n    this.setState({\n      accounts: Object.assign({}, this._accounts),\n    })\n    this._oldCounts = counts;\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        if (this.state.highlightedAccountIndex >= 0 && p.ownerIndex !== this.state.highlightedAccountIndex) {\n          ctx.fillStyle = '#000';\n          ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n          ctx.fillStyle = transparentColor(p.color, 0.2);\n          ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n        } else {\n          ctx.fillStyle = intToColor(p.color);\n          ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n        }\n      }\n    }\n\n    this._pendingPixels.concat(this._queue).forEach((p) => {\n      ctx.fillStyle = intToColor(p.color);\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\n    })\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n      if (this.state.pickingColor) {\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\n        ctx.lineWidth = CellWidth * 4;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\n        ctx.lineWidth = CellWidth * 2;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n      } else {\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\n        ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\n        ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\n\n        ctx.beginPath();\n        ctx.lineWidth = 3;\n        ctx.fillStyle = intToColor(this.state.currentColor);\n        ctx.strokeStyle = intToColor(this.state.currentColor);\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'Berry Club';\n    await this._walletConnection.requestSignIn(\n        NearConfig.contractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    const index = this.state.colors.indexOf(newColor);\n    if (index >= 0) {\n      this.state.colors.splice(index, 1);\n    }\n    this.setState({\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n    });\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  async buyTokens(amount) {\n    const requiredBalance = PixelPrice.muln(amount);\n    await this._contract.buy_tokens({}, new BN(\"30000000000000\"), requiredBalance);\n  }\n\n  setHover(accountIndex, v) {\n    if (v) {\n      this.setState({\n        highlightedAccountIndex: accountIndex,\n      }, () => {\n        this.renderCanvas();\n      })\n    } else if (this.state.highlightedAccountIndex === accountIndex) {\n      this.setState({\n        highlightedAccountIndex: -1,\n      }, () => {\n        this.renderCanvas();\n      })\n    }\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out ({this.state.accountId})</button>\n          </div>\n          <div className=\"your-balance\">\n            Balance: <Balance\n              balance={this.state.balance - this.state.pendingPixels}\n              numPixels={this.state.numPixels}\n              pendingPixels={this.state.pendingPixels}\n          />\n          </div>\n          <div className=\"buttons\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(10)}>Buy <span className=\"font-weight-bold\">25🥑</span> for <span className=\"font-weight-bold\">Ⓝ0.1</span></button>{' '}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(40)}>Buy <span className=\"font-weight-bold\">100🥑</span> for <span className=\"font-weight-bold\">Ⓝ0.4</span></button>{' '}\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.buyTokens(100)}>Buy <span className=\"font-weight-bold\">250🥑</span> for <span className=\"font-weight-bold\">Ⓝ1</span></button>{' '}\n            <button\n              className=\"btn btn-success\"\n              onClick={() => this.buyTokens(500)}>DEAL: Buy <span className=\"font-weight-bold\">1500🥑</span> for <span className=\"font-weight-bold\">Ⓝ5</span></button>\n          </div>\n          <div className=\"color-picker\">\n            <div>Select a color to draw</div>\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>🥑 Berry Club</h1>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-8\">\n              {content}\n              <div>\n                {this.state.signedIn ? <div>Draw here - one 🥑 per pixel. Hold <span className=\"badge badge-secondary\">ALT</span> key to pick a color from board.</div> : \"\"}\n                <canvas ref={this.canvasRef}\n                        width={800}\n                        height={800}\n                        className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n                </canvas>\n              </div>\n            </div>\n            <div className=\"col-lg-4\">\n              <div>Leaderboard</div>\n              <div>\n                <Leaderboard\n                  owners={this.state.owners}\n                  accounts={this.state.accounts}\n                  setHover={(accountIndex, v) => this.setHover(accountIndex, v)}\n                  highlightedAccountIndex={this.state.highlightedAccountIndex}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Balance = (props) => {\n  return (\n    <span className=\"balances font-small\">\n      <span className=\"font-weight-bold\">{props.balance.toFixed(3)}</span>\n      {'🥑 (+'}\n      <span className=\"font-weight-bold\">{props.numPixels + 1}</span>\n      {'🥑/day)'}\n      {\n        props.pendingPixels ? <span> ({props.pendingPixels} pending)</span> : \"\"\n      }\n    </span>\n  );\n};\n\nconst Leaderboard = (props) => {\n  const owners = props.owners.map((owner) => {\n    if (owner.accountIndex in props.accounts) {\n      owner.account = props.accounts[owner.accountIndex];\n    }\n    return <Owner\n      key={owner.accountIndex}\n      {...owner}\n      setHover={(v) => props.setHover(owner.accountIndex, v)}\n      isHighlighted={owner.accountIndex === props.highlightedAccountIndex}\n    />\n  })\n  return (\n    <table className=\"table table-hover table-sm\"><tbody>{owners}</tbody></table>\n  );\n};\n\nconst Owner = (props) => {\n  const account = props.account;\n  return (\n    <tr onMouseEnter={() => props.setHover(true)}\n        onMouseLeave={() => props.setHover(false)}>\n      <td>\n        {account ? <Account accountId={account.accountId} /> : \"...\"}\n      </td>\n      <td className=\"text-nowrap\">\n        <small>\n          <Balance balance={account ? account.balance : 0} numPixels={props.numPixels} />\n        </small>\n      </td>\n    </tr>\n  )\n}\n\nconst Account = (props) => {\n  const accountId = props.accountId;\n  let shortAccountId = accountId\n  if (accountId.length > 6 + 6 + 3) {\n    shortAccountId = accountId.slice(0, 6) + '...' + accountId.slice(-6);\n  }\n  return <a className=\"account\"\n            href={`https://explorer.near.org/accounts/${accountId}`}>{shortAccountId}</a>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}